{"version":3,"sources":["components/Header.js","components/EditDelete.js","components/Task.js","components/NewTask.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","console","log","title","className","totalTask","EditDelete","this","removeTask","id","toggleForm","onClick","icon","faTrashAlt","faEdit","Component","Task","state","isEditing","bind","saveTask","taskTitle","onSubmit","name","type","defaultValue","faCheckCircle","event","preventDefault","editTask","target","value","setState","PureComponent","NewTask","handleSubmit","trim","length","addNewTask","reset","alert","App","tasks","prevTaskId","handleAddNewTask","handleRemoveTask","prevState","filter","task","handleEditTask","newTaskTitle","index","findIndex","newArray","splice","map","done","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96e2951a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = props => {\r\n    console.log(props);\r\n    return (\r\n      <header>\r\n        <h1>{props.title}</h1>\r\n        <span className=\"stats\">Total Tasks : {props.totalTask}</span>\r\n      </header>\r\n    );\r\n  };\r\n\r\n  export default Header;","import React , {Component} from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faEdit} from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass EditDelete extends Component {\r\n    render(){\r\n        const{removeTask, id, toggleForm} = this.props;\r\n        return (\r\n            <span>\r\n                <button className = \"remove-task style-icon\" onClick = {()=>{removeTask(id)}}><FontAwesomeIcon icon= {faTrashAlt}/></button>\r\n                <button className = \"edit-task style-icon\" onClick = {()=>{toggleForm()}}><FontAwesomeIcon icon= {faEdit} /></button>\r\n            </span>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditDelete;","import React, { PureComponent } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheckCircle} from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport EditDelete from \"./EditDelete\";\r\n\r\n\r\nclass Task extends PureComponent {\r\n  state = { isEditing: false };\r\n\r\n  constructor() {\r\n    super();\r\n    this.toggleForm = this.toggleForm.bind(this);\r\n    this.saveTask = this.saveTask.bind(this);\r\n  }\r\n\r\n  render() {\r\n     \r\n    const { taskTitle, id, removeTask } = this.props;\r\n    console.log(this.props.title);\r\n\r\n    return (\r\n      <div className=\"task\">\r\n        <span className=\"task-title\">\r\n          {!this.state.isEditing ? (\r\n            <span className =\"task-parent\">\r\n            <input type=\"checkbox\" className=\"styled\" \r\n            />\r\n            <label>{taskTitle}</label>\r\n            </span>\r\n          ) : (\r\n            <form className =\"edit-form\" onSubmit={this.saveTask}>\r\n              <input name=\"taskTitle\" type=\"text\" defaultValue={taskTitle} />\r\n              <button><FontAwesomeIcon icon= {faCheckCircle} /></button>\r\n            </form>\r\n          )}\r\n            <EditDelete\r\n                removeTask={removeTask}\r\n                id={id}\r\n                isEditing={this.state.isEditing}\r\n                toggleForm={this.toggleForm}\r\n            />\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  saveTask(event) {\r\n    event.preventDefault();\r\n\r\n    const { id, editTask } = this.props;\r\n\r\n    const newTaskTitle = event.target.taskTitle.value;\r\n\r\n    editTask(id, newTaskTitle);\r\n    this.setState({\r\n      isEditing: false\r\n    });\r\n  }\r\n\r\n  toggleForm() {\r\n    this.setState({\r\n      isEditing: !this.state.isEditing\r\n    });\r\n  }\r\n}\r\n\r\nexport default Task;\r\n","import React, { Component } from \"react\";\r\n\r\nclass NewTask extends Component {\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const title = event.target.title.value.trim();\r\n\r\n    if (!title.length) {\r\n      alert(\"Please Enter Your Task to the List\");\r\n    } else {\r\n      this.props.addNewTask(title);\r\n      event.target.reset();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className = \"task-form\" onSubmit={this.handleSubmit}>\r\n        {/* <input type=\"text\" value={this.state.value} onChange ={this.handleValueChange} /> */}\r\n        <input type=\"text\" name=\"title\" />\r\n        <input type=\"submit\" value=\"Add \" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewTask;\r\n","import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport Task from \"./Task\";\nimport NewTask from \"./NewTask\";\n\n\nclass App extends Component {\n  state = {\n    tasks: [\n      {\n        title: \"hand in my homework\",\n        id: 1,\n        \n      },\n      {\n        title: \"study group meeting at Zendesk at 2:00 pm\",\n        id: 2,\n        \n      },\n      {\n        title: \"play table tennis\",\n        id: 3,\n      }\n    ]\n  };\n\n  // task id counter\n  prevTaskId = 3;\n\n  handleAddNewTask = title => {\n    this.setState({\n      tasks: [\n        ...this.state.tasks,\n        {\n          title,\n          id: (this.prevTaskId += 1)\n        }\n      ]\n    });\n  };\n\n  handleRemoveTask = id => {\n    this.setState(prevState => ({\n      tasks: prevState.tasks.filter(task => task.id !== id)\n    }));\n  };\n  handleEditTask = (id, newTaskTitle) => {\n    const index = this.state.tasks.findIndex(task => task.id === id);\n    const newArray = [...this.state.tasks];\n    newArray.splice(index, 1, { ...newArray[index], title: newTaskTitle });\n    this.setState({\n      tasks: newArray\n    });\n  };\n  render() {\n    return (\n      <div className=\"todo-ist\">\n        <Header title=\"To do list\" totalTask={this.state.tasks.length} />\n        <div className=\"tasks-container\">\n          {this.state.tasks.map(task => (\n            <Task\n              taskTitle={task.title}\n              id={task.id}\n              done={task.done}\n              key={task.id}\n              removeTask={this.handleRemoveTask}\n              editTask={this.handleEditTask}\n              \n            />\n          ))}\n        </div>\n\n        <NewTask addNewTask={this.handleAddNewTask} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}